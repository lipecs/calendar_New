// src/services/user.js - CORRIGIDO COM HEADERS
import axios from 'axios';
import authService from './auth';

const API_URL = 'http://localhost:8080/api';
const ADMIN_API_URL = 'http://localhost:8080/api/admin';

class UserService {
  
  // ‚úÖ NOVO: M√©todo para obter headers de autentica√ß√£o
  getAuthHeaders() {
    const currentUser = authService.getCurrentUser();
    if (!currentUser || !currentUser.userData) {
      throw new Error('Usu√°rio n√£o autenticado');
    }
    
    return {
      'X-User-Id': currentUser.userData.id.toString(),
      'X-User-Role': authService.getUserRoleHeader(currentUser.userData.role)
    };
  }

  // ‚úÖ CORRIGIDO: Buscar todos os usu√°rios
  async getAllUsers() {
    try {
      authService.isAuthenticated();
      
      const response = await axios.get(ADMIN_API_URL + '/users', {
        headers: this.getAuthHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Erro ao buscar usu√°rios:', error);
      throw error;
    }
  }

  // ‚úÖ CORRIGIDO: Buscar usu√°rio por ID
  async getUserById(id) {
    try {
      authService.isAuthenticated();
      
      const response = await axios.get(ADMIN_API_URL + `/users/${id}`, {
        headers: this.getAuthHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Erro ao buscar usu√°rio por ID:', error);
      throw error;
    }
  }

  // ‚úÖ CORRIGIDO: Criar usu√°rio
  async createUser(userData) {
    try {
      console.log('‚ûï Criando usu√°rio:', userData);
      
      authService.isAuthenticated();
      
      const payload = {
        username: userData.username,
        email: userData.email,
        password: userData.password,
        role: userData.role,
        supervisorId: userData.supervisorId || null,
        coordenadorId: userData.coordenadorId || null
      };
      
      console.log('üì§ Payload sendo enviado:', payload);
      console.log('üîë Headers de autentica√ß√£o:', this.getAuthHeaders());
      
      const response = await axios.post(ADMIN_API_URL + '/users', payload, {
        headers: this.getAuthHeaders()
      });
      
      console.log('‚úÖ Usu√°rio criado com sucesso:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erro ao criar usu√°rio:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message
      });
      
      // Tratamento melhorado de erros
      if (error.response?.status === 400) {
        const errorMessage = error.response.data || 'Dados inv√°lidos';
        throw new Error(`Erro de valida√ß√£o: ${errorMessage}`);
      } else if (error.response?.status === 401) {
        throw new Error('Sess√£o expirada. Fa√ßa login novamente.');
      } else if (error.response?.status === 403) {
        throw new Error('Voc√™ n√£o tem permiss√£o para criar usu√°rios.');
      } else if (error.response?.status >= 500) {
        throw new Error('Erro interno do servidor. Tente novamente mais tarde.');
      } else {
        throw new Error(error.response?.data || error.message || 'Erro ao criar usu√°rio');
      }
    }
  }

  // ‚úÖ CORRIGIDO: Atualizar usu√°rio
  async updateUser(id, userData) {
    try {
      console.log('‚úèÔ∏è Atualizando usu√°rio ID:', id, userData);
      
      authService.isAuthenticated();
      
      const payload = {
        username: userData.username,      
        email: userData.email,
        role: userData.role,
        supervisorId: userData.supervisorId || null,
        coordenadorId: userData.coordenadorId || null
      };
      
      // Incluir senha apenas se fornecida
      if (userData.password && userData.password.trim()) {
        payload.password = userData.password;
      }
      
      console.log('üì§ Payload de atualiza√ß√£o sendo enviado:', payload);
      console.log('üîë Headers de autentica√ß√£o:', this.getAuthHeaders());
      
      const response = await axios.put(ADMIN_API_URL + `/users/${id}`, payload, {
        headers: this.getAuthHeaders()
      });
      
      console.log('‚úÖ Usu√°rio atualizado com sucesso:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erro ao atualizar usu√°rio:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message
      });
      
      // Tratamento melhorado de erros
      if (error.response?.status === 400) {
        const errorMessage = error.response.data || 'Dados inv√°lidos';
        throw new Error(`Erro de valida√ß√£o: ${errorMessage}`);
      } else if (error.response?.status === 401) {
        throw new Error('Sess√£o expirada. Fa√ßa login novamente.');
      } else if (error.response?.status === 403) {
        throw new Error('Voc√™ n√£o tem permiss√£o para atualizar este usu√°rio.');
      } else if (error.response?.status === 404) {
        throw new Error('Usu√°rio n√£o encontrado.');
      } else if (error.response?.status >= 500) {
        throw new Error('Erro interno do servidor. Tente novamente mais tarde.');
      } else {
        throw new Error(error.response?.data || error.message || 'Erro ao atualizar usu√°rio');
      }
    }
  }

  async deleteUser(id) {
    try {
      console.log('üóëÔ∏è Deletando usu√°rio ID:', id);
      
      authService.isAuthenticated();
      
      const response = await axios.delete(ADMIN_API_URL + `/users/${id}`, {
        headers: this.getAuthHeaders()
      });
      
      console.log('‚úÖ Usu√°rio deletado com sucesso');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erro ao excluir usu√°rio:', error);
      
      // Tratamento melhorado de erros
      if (error.response?.status === 401) {
        throw new Error('Sess√£o expirada. Fa√ßa login novamente.');
      } else if (error.response?.status === 403) {
        throw new Error('Voc√™ n√£o tem permiss√£o para excluir este usu√°rio.');
      } else if (error.response?.status === 404) {
        throw new Error('Usu√°rio n√£o encontrado.');
      } else if (error.response?.status >= 500) {
        throw new Error('Erro interno do servidor. Tente novamente mais tarde.');
      } else {
        throw new Error(error.response?.data || error.message || 'Erro ao excluir usu√°rio');
      }
    }
  }

  // ‚úÖ CORRIGIDO: Buscar coordenadores
  async getCoordenadores() {
    try {
      authService.isAuthenticated();
      
      const response = await axios.get(ADMIN_API_URL + '/coordenadores', {
        headers: this.getAuthHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Erro ao buscar coordenadores:', error);
      throw error;
    }
  }

  // ‚úÖ CORRIGIDO: Buscar supervisores
  async getSupervisores() {
    try {
      authService.isAuthenticated();
      
      const response = await axios.get(ADMIN_API_URL + '/supervisores', {
        headers: this.getAuthHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Erro ao buscar supervisores:', error);
      throw error;
    }
  }

  // ‚úÖ NOVO: Buscar vendedores (para sele√ß√£o de usu√°rios subordinados)
  async getVendedores() {
    try {
      authService.isAuthenticated();
      
      const response = await axios.get(ADMIN_API_URL + '/vendedores', {
        headers: this.getAuthHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Erro ao buscar vendedores:', error);
      throw error;
    }
  }

  // ‚úÖ NOVO: M√©todo central para tratamento de erros
  handleError(error, action) {
    const status = error.response?.status;
    const message = error.response?.data || error.message;

    switch (status) {
      case 400:
        return new Error(`Dados inv√°lidos para ${action}: ${message}`);
      case 401:
        return new Error('Sess√£o expirada. Fa√ßa login novamente.');
      case 403:
        return new Error(`Voc√™ n√£o tem permiss√£o para ${action}.`);
      case 404:
        return new Error('Usu√°rio n√£o encontrado.');
      case 409:
        return new Error('Conflito: dados j√° existem.');
      case 422:
        return new Error(`Dados inv√°lidos: ${message}`);
      case 500:
      case 502:
      case 503:
      case 504:
        return new Error('Erro interno do servidor. Tente novamente mais tarde.');
      default:
        return new Error(message || `Erro ao ${action}`);
    }
  }

  // ‚úÖ NOVO: Verificar conectividade com o backend
  async testConnection() {
    try {
      console.log('üîó Testando conex√£o com o backend de usu√°rios...');
      
      const response = await axios.get(`${ADMIN_API_URL}/users`, {
        headers: this.getAuthHeaders(),
        timeout: 5000 // 5 segundos de timeout
      });
      
      console.log('‚úÖ Conex√£o com backend de usu√°rios OK');
      return true;
    } catch (error) {
      console.error('‚ùå Falha na conex√£o com backend de usu√°rios:', error);
      return false;
    }
  }
}

export default new UserService();
